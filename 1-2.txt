def choose_word(file_path, index):
    """
    this function checks if the user won
    :params file_path, index: the file path for the txt with optional secret word, the index of the chosen word in the file
    :type string, int
    :return number of different words in the file, thw word corresponding to the index 
    :rtype int, string
    """
    with open(file_path, 'r') as file:
        words = file.read()
    list_of_words = words.split()
    secret_word=list_of_words[(index-1)%len(list_of_words)]
    counter=len(set(list_of_words))
    guess_work=(counter,secret_word)
    return guess_work



def print_hangman(num_of_tries):
    HANGMAN_PHOTOS = {
        1: """
        x-------x
         """,
        2: """
        x-------x
        |
        |
        |
        |
        |""",
        3: """
        x-------x
        |       |
        |       0
        |
        |
        |""",
        4: """
        x-------x
        |       |
        |       0
        |       |
        |
        |""",
        5: """
        x-------x
        |       |
        |       0
        |      /|\\
        |
        |""",
        6: """
        x-------x
        |       |
        |       0
        |      /|\\
        |      /
        |""",
        7: """
        x-------x
        |       |
        |       0
        |      /|\\
        |      / \\
        |"""
    }
    print(HANGMAN_PHOTOS[num_of_tries])



def check_win(secret_word, old_letters_guessed):
    """
    this function checks if the user won
    :params secret_word: the word user has to guess, old_letters_guessed: letters gueested in the past
    :type string, list
    :return true if all the words in the secret word is in the list guessed by the user, else False 
    :rtype bol
    """
    counter=0
    for i in range(len(old_letters_guessed)):
            if old_letters_guessed[i] in secret_word:
                counter +=1
    if counter ==len(secret_word):
        return True
    else:
        return False








def show_hidden_word(secret_word, old_letters_guessed):
    """
    this function checks if the guessed letters by the user match the secret word
    :params secret_word: the word user has to guess, old_letters_guessed: letterg gueested in the past
    :type string, string
    :return string of _ and letters in the correct position 
    :rtype string
    """
    altered_word=["_"] * len(secret_word)
    for i in range(len(secret_word)):
            for j in range(len(old_letters_guessed)):
                if  secret_word[i] == old_letters_guessed[j]:
                    altered_word[i]=old_letters_guessed[j]
    return " ".join(altered_word)








def check_valid_letter(low_case_letter, old_letters_guessed): 
    """
    this function checks the validity of the letter_guessed and previews guseed letters-old_letters_guessed
    :params letter_gussed:current input letter, old_letters_guessed:old inputs
    :type string, list
    :return validity of the input and if the the user guessed the letter already
    :rtype bool
    """
    if not low_case_letter.isalpha() or len(low_case_letter)>1 or low_case_letter in old_letters_guessed:
        return False
    else:
        return True

def try_update_letter_guessed(letter_guessed, old_letters_guessed):
    letter_for_check=letter_guessed.lower()
    if check_valid_letter(letter_for_check, old_letters_guessed):
        old_letters_guessed.append(letter_for_check)
        return True
    else:
        print("X")
        list_as_string=''.join(sorted(old_letters_guessed)) #converts list to strings
        lower_case_string=list_as_string.lower()            #converts string to all lower case
        sorted_string="->".join(sorted(lower_case_string))  #adds -> to the string
        print(sorted_string)
        return False

def main():
    letter=input ("write a letter: \n")
    print(try_update_letter_guessed(letter,old_letters))
    farwell=input("press any key to finish")

if __name__ == "__main__":
    main()






def check_valid_letter(letter_guessed, old_letters_guessed): 
    """
    this function checks the validity of the letter_guessed and previews guseed letters-old_letters_guessed
    :params letter_gussed:current input letter, old_letters_guessed:old inputs
    :type string, list
    :return validity of the input and if the the user guessed the letter already
    :rtype bool
    """
    if not letter_guessed.isalpha():
        return False
    elif len(letter_guessed)>1:
        return False
    elif letter_guessed in old_letters_guessed:
        return False
    else:
        return True

def main():
    letter=input ("write a letter: \n")
    print(check_valid_letter(letter,old_letters))
    farwell=input("farwell!")

if __name__ == "__main__":
    main()








word=input("write a word: \n")
if (len(word)>1):
  print("E1")
elif (word.isalpha()==0):
  print("E2")
elif (len(word) and word.isalpha()==0):
  print("E3")
else:
  print("_ "* len(word))




letter=input("Guess a Letter: \n")
print(letter.lower())






>>> letter=input("Guess a Letter: \n")
print(letter)



HANGMAN_ASCII_ART="""
  _    _                                         
 | |  | |                                        
 | |__| | __ _ _ __   __ _ _ __ ___   __ _ _ __  
 |  __  |/ _` | '_ \ / _` | '_ ` _ \ / _` | '_ \ 
 | |  | | (_| | | | | (_| | | | | | | (_| | | | |
 |_|  |_|\__,_|_| |_|\__, |_| |_| |_|\__,_|_| |_|
                      __/ |                      
                     |___/ """
MAX_TRIES=6

 print(" Welcome to the game Hangman\n",HANGMAN_ASCII_ART,"\n",MAX_TRIES)







def game_openinng():
    print("Welcome to the game Hangman ")
    print("""\
     _    _
    | |  | |
    | |__| | __ _ _ __   __ _ _ __ ___   __ _ _ __
    |  __  |/ _` | '_ \ / _` | '_ ` _ \ / _` | '_ \
    | |  | | (_| | | | | (_| | | | | | | (_| | | | |
    |_|  |_|\__,_|_| |_|\__, |_| |_| |_|\__,_|_| |_|
                         __/ |
                        |___/ """)

print("x-------x")
print("""
    x-------x
    |
    |
    |
    |
    | """)

print("""
    x-------x
    |       |
    |       0
    |
    |
    | """)
	
print("""
    x-------x
    |       |
    |       0
    |       |
    |
    | """)
	
print("""
    x-------x
    |       |
    |       0
    |      /|\
    |
    | """)
	
print("""
    x-------x
    |       |
    |       0
    |      /|\
    |      /
    | """)
	
print("""
    x-------x
    |       |
    |       0
    |      /|\
    |      / \
    | """)